<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>RESTful on Byte Prince</title>
    <link>https://byteprince.com/tags/restful/</link>
    <description>Recent content in RESTful on Byte Prince</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Jul 2021 10:06:18 +0800</lastBuildDate><atom:link href="https://byteprince.com/tags/restful/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>学习 RESTful</title>
      <link>https://byteprince.com/posts/7317a8b9/</link>
      <pubDate>Sat, 24 Jul 2021 10:06:18 +0800</pubDate>
      
      <guid>https://byteprince.com/posts/7317a8b9/</guid>
      <description>一种设计风格和开发方式</description>
      <content:encoded><![CDATA[

<h1 id="rest">REST</h1>

<p><strong>Re</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer = <strong>REST</strong></p>

<ul>
<li><strong>Re</strong>presentational = 数据的表现形式（<code>JSON</code>,<code>XML</code>等）</li>
<li><strong>S</strong>tate = 当前状态或数据</li>
<li><strong>T</strong>ransfer = 数据传输</li>
</ul>

<h1 id="rest的限制">REST的限制</h1>

<p><strong>1.客户端-服务器（Client-Server）</strong></p>

<ul>
<li>关注点分离

<ul>
<li>服务端专注数据存储，提升简单性</li>
<li>前端专注用户界面，提升可移植性</li>
</ul></li>
</ul>

<p><strong>2.无状态（Stateless）</strong></p>

<ul>
<li>所用户会话信息都保存在客户端</li>
<li>每次请求必须包括所有信息，不能依赖上下文信息</li>
<li>服务端不用保存会话信息，提升了简单性、可靠性、可见性</li>
</ul>

<p><strong>3.缓存（Cache）</strong></p>

<ul>
<li>所有服务端响应都要被标注为<code>可缓存</code>或<code>不可缓存</code></li>
<li>减少前后端交互，提升了性能</li>
</ul>

<p><strong>4.统一接口（Uniform Interface）</strong></p>

<ul>
<li>接口设计尽可能统一通用，提升了简单性和可见性</li>
<li>接口与实现解耦，使前后端可以独立开发迭代</li>
</ul>

<p><strong>5.分层系统（Layered System）</strong></p>

<ul>
<li>每层只知道相邻的一层，后面隐藏的就不知道了</li>
<li>客户端不知道是和代理还是真实服务器通信</li>
<li>其他层：安全层、负载均衡、缓存层等</li>
</ul>

<p><strong>6.按需代码（Code-On-Demand）</strong></p>

<ul>
<li>客户端可以下载运行服务端传来的代码（比如<code>JS</code>）</li>
<li>通过减少了一些功能简化了客户端</li>
</ul>

<h1 id="统一接口的限制">统一接口的限制</h1>

<p><strong>1.资源的标识</strong></p>

<ul>
<li>资源是任何可以命名的事物，比如用户，评论等</li>
<li>每个资源可以通过<code>URI</code>被唯一地标识</li>
</ul>

<p><strong>2.表述（Representation）操作资源</strong></p>

<ul>
<li>客户端不能直接操作服务端资源（比如<code>SQL</code>）</li>
<li>客户端应该通过<strong>表述</strong>来操作资源（比如<code>JSON</code>）</li>
</ul>

<p><strong>3.自描述消息</strong></p>

<ul>
<li>每个消息（请求或相应）必须提供足够的信息让接收者理解</li>
<li>媒体类型：<code>application/json</code>、<code>application/xml</code></li>
<li>HTTP方法：<code>GET</code>、<code>POST</code>、<code>DELETE</code></li>
<li>是否缓存：<code>Cache-Control</code></li>
</ul>

<p><strong>4.超媒体作为应用状态引擎</strong></p>

<ul>
<li>超媒体：带文字的链接</li>
<li>应用状态：一个网页</li>
<li>引擎：驱动、跳转</li>
</ul>

<h1 id="restful-api">RESTful API</h1>

<ul>
<li>基本的URI，如<code>https://api.github.com/users</code></li>
<li>标准<code>HTTP</code>方法，如：<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>PATCH</code>、<code>DELETE</code>等</li>
<li>传输的数据媒体类型，如：<code>JSON</code>， <code>XML</code>等</li>
</ul>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
